import { gql, useQuery } from "@apollo/client";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import Router from 'next/router'
import { useEffect, useState } from "react";
import { LinkHolder } from "../components/LinkHolder";
import Links from "../components/Links";
import { Arr, IObjectMap } from "../interfaces";
import client from "../service/apollo-client";
// import { getLink } from '../service/apollo-client'
import styles from "../styles/Home.module.css";
import utils from "../utils";
import AUTH_TOKEN from "../utils";

const Home = ({ links }: { links: IObjectMap }) => {
  console.log(links);
  const [state,setState] = useState<string | null>()

  useEffect(() => {
    const authToken = localStorage.getItem(utils.AUTH_TOKEN) || null
    setState(authToken)
    return () => {
      state
    }
  }, [state])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav>
        <ul>
          <li>Hacker News</li>

          <li>New </li>

          {state && (
            <li>
              <Link href="/create">Create A Link</Link>
            </li>
          )}
          {state ? (
            <li onClick={()=> {localStorage.removeItem(utils.AUTH_TOKEN); setState('');
          
              Router.push('/')}}>
                <a>Logout</a>
            </li>
          ) : (
            <li>
              <Link href="/login">
                <a>Login</a>
              </Link>
            </li>
          )}
        </ul>
      </nav>
      <Links/>
    </div>
  );
};

export default Home;

export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      query Query {
        feedData{
    id
    description
    url
    createdAt
    postedBy{
      name
    }
    votes {
          id
          user {
            id
          }
        }
  }
      }
    `,
  });
  return {
    props: {
      links: data.feedData,
    },
  };
}
